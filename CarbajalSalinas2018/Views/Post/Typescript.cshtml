@{
    Layout = "~/Views/Shared/_LayoutTypescript.cshtml";
} 

<article id="post-50" class="post-50 post type-post status-publish format-standard hentry category-uncategorized">
    <header class="entry-header">
        <div class="entry-meta">
            <a title="3:30 pm" rel="bookmark"><time class="entry-date" datetime="2017-01-23T15:30:03+00:00">January 23, 2017</time></a><span class="byline"> by <span class="author vcard"><a class="url fn n" href="" title="View all posts by carbajalsalinas" rel="author">carbajalsalinas</a></span></span>
        </div><!-- .entry-meta -->
        <h1 class="page-title">Yo estaba equivocado sobre TypeScript. Aquí el por&nbsp;qué:</h1>
    </header><!-- .entry-header -->

    <div class="entry-content">
        <p>Cuando se anuncia algo nuevo, la gente tiende a elegir lados. Cuando se anunció TypeScript, escogí erróneamente algunos conceptos clave que no resonaron conmigo, y luego elegí mi lado: en contra. Voy<img data-attachment-id="27" data-permalink="https://carbajalsalinas.wordpress.com/2017/01/23/yo-estaba-equivocado-sobre-typescript-aqui-el-por-que/tomar-decisiones_1/" data-orig-file="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=700" data-orig-size="480,320" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="tomar-decisiones_1" data-image-description="" data-medium-file="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=700?w=300" data-large-file="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=700?w=480" class=" size-full wp-image-27 alignright" src="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=700" alt="tomar-decisiones_1" srcset="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg 480w, https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=150 150w, https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=300 300w" sizes="(max-width: 480px) 100vw, 480px"> a tratar de explicar lo que pensaba cuando se ha anunciado TypeScript y cómo llegué a darse cuenta de que hay grandes mentes detrás de él que realmente saben cómo generar grandes beneficios sin grandes sacrificios.</p>
        <p>Mis pensamientos iniciales después de que TypeScript fue anunciado</p>
        <p>Cuando Anders Hejlsberg está trabajando en algo, ese proyecto automáticamente tiene toda mi atención. Tiene cerca de 30 años de experiencia en la construcción de compiladores y el diseño de lenguajes de programación. Puede leer más sobre su participación en varios lenguajes de programación en su página de Wikipedia.</p>
        <p>Cuando me enteré de que estaba trabajando en un idioma que es transpiled (también conocido como de fuente a fuente compilado) a JavaScript, inicialmente me sentí decepcionado. Microsoft va a la ruta Dart / CoffeeScript y rechaza el estándar ECMAScript. No voy a aprender un nuevo idioma y olvidaré todo lo que aprendí para expresar algo en una forma más corta. Debe haber algo más en eso.</p>
        <p>También tuvo malos recuerdos de cómo Microsoft trató de conseguir desarrolladores de Windows en el desarrollo Web mediante la introducción de ASP.NET Web Forms. Web Forms abstraía las tecnologías básicas de la Web con resultados mixtos. ¿Es TypeScript dirigido a desarrolladores C # que “no pueden” aprender JavaScript? ¿Es un nuevo idioma con características que son familiares a los desarrolladores de C #?</p>
        <p>Incluso con Hejlsberg en el equipo, simplemente no podía emocionarse con TypeScript, y no profundizar más. Perdí completamente algunos puntos clave del lenguaje y el compilador.</p>
        <p><img data-attachment-id="42" data-permalink="https://carbajalsalinas.wordpress.com/2017/01/23/yo-estaba-equivocado-sobre-typescript-aqui-el-por-que/lbpdlp/" data-orig-file="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243" data-orig-size="610,371" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="lbpdlp" data-image-description="" data-medium-file="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243?w=300" data-large-file="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243?w=610" class=" wp-image-42 alignright" src="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243" alt="lbpdlp" width="400" height="243" srcset="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243 400w, https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=150&amp;h=91 150w, https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=300&amp;h=182 300w, https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg 610w" sizes="(max-width: 400px) 100vw, 400px">Uso de TypeScript con otras herramientas</p>
        <p>Cuando pienso en otras herramientas que he utilizado para el desarrollo de JavaScript, me viene a la mente lo siguiente: linting tools, Browserify / Webpack, frameworks de prueba y BabelJS. ¿Es TypeScript hacer algunos de ellos obsoletos?</p>
        <p>Herramientas de recubrimiento</p>
        <p>Si TypeScript es tan potente cuando se trata de detectar errores, ¿necesitamos herramientas como ESLint o JSHint? La respuesta es “sí”. Por ejemplo, además de las comprobaciones de errores, ESLint contiene comprobaciones de formato de código de estilo y p<img data-attachment-id="48" data-permalink="https://carbajalsalinas.wordpress.com/2017/01/23/yo-estaba-equivocado-sobre-typescript-aqui-el-por-que/mejor-lenguajes-de-programacion/" data-orig-file="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228" data-orig-size="300,284" data-comments-opened="1" data-image-meta="{&quot;aperture&quot;:&quot;0&quot;,&quot;credit&quot;:&quot;&quot;,&quot;camera&quot;:&quot;&quot;,&quot;caption&quot;:&quot;&quot;,&quot;created_timestamp&quot;:&quot;0&quot;,&quot;copyright&quot;:&quot;&quot;,&quot;focal_length&quot;:&quot;0&quot;,&quot;iso&quot;:&quot;0&quot;,&quot;shutter_speed&quot;:&quot;0&quot;,&quot;title&quot;:&quot;&quot;,&quot;orientation&quot;:&quot;0&quot;}" data-image-title="mejor-lenguajes-de-programacion" data-image-description="" data-medium-file="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228?w=300" data-large-file="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228?w=300" class=" wp-image-48 alignleft" src="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228" alt="mejor-lenguajes-de-programacion" width="241" height="228" srcset="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228 241w, https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=150&amp;h=142 150w, https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png 300w" sizes="(max-width: 241px) 100vw, 241px">rácticas óptimas. Lamentablemente, la compatibilidad con ESLint se basa en</p>
        <p>el proyecto TypeScript ESLint Parser, que se encuentra en fase experimental.</p>
        <p>La buena noticia es que existe una herramienta llamada TSLint que se creó para TypeScript.</p>
        <p>Conclusión</p>
        <p>Espero poder darle al menos una pequeña parte de mi entusiasmo para que usted dé a TypeScript otra oportunidad. Me gustaría saber si has tenido experiencias exitosas o miserables usando TypeScript en proyectos reales. ¡Hasta la próxima vez!</p>
    </div><!-- .entry-content -->

</article>