@{
    Layout = "~/Views/Shared/_LayoutTypescriptEng.cshtml";
} 

<article id="post-50" class="post-50 post type-post status-publish format-standard hentry category-uncategorized">
    <header class="entry-header">
        <div class="entry-meta">
            <a title="3:30 pm" rel="bookmark"><time class="entry-date" datetime="2017-01-23T15:30:03+00:00">January 23, 2017</time></a><span class="byline"> by <span class="author vcard"><a class="url fn n" href="" title="View all posts by carbajalsalinas" rel="author">carbajalsalinas</a></span></span>
        </div><!-- .entry-meta -->
        <h1 class="page-title">I was wrong about TypeScript. Here is&nbsp;why:</h1>
    </header><!-- .entry-header -->

    <div class="entry-content">
        <p>When something new is announced, people have a tendency to choose sides. When TypeScript was announced, I wrongfully picked a few key concepts that didn’t resonate with me, then chose my side: against. I’ll try to explain what I thought when TypeScript <img class=" alignright" src="https://carbajalsalinas.files.wordpress.com/2017/01/tomar-decisiones_1.jpg?w=700" alt="tomar-decisiones_1">was announced and how I came to realize that there are great minds behind it who really know how to generate huge benefits without huge sacrifices.</p>
        <p><strong>My initial thoughts after TypeScript was announced</strong></p>
        <p>When Anders Hejlsberg is working on something, that project automatically has my full attention. He has close to 30 years of experience in building compilers and designing programming languages. You can read more about his involvement in various programming languages on his Wikipedia page.</p>
        <p>When I heard, he was working on a language that is transpiled (aka source-to-source compiled) to JavaScript, I initially felt disappointed. Microsoft is going the <img class=" alignright" src="https://carbajalsalinas.files.wordpress.com/2017/01/lbpdlp.jpg?w=400&amp;h=243" alt="lbpdlp">Dart/CoffeeScript route and rejecting the ECMAScript standard. I am not going to learn a new language and forget everything I learned just to express something in a shorter form. There must be something more to that.</p>
        <p>Also, had bad memories of how Microsoft tried to get Windows developers into Web development by introducing ASP.NET Web Forms. Web Forms abstracted away the core technologies of the Web with mixed results. Is TypeScript aimed towards C# developers that “can’t” learn JavaScript? Is it a new language with features which are familiar to C# developers?</p>
        <p>Even with Hejlsberg on the team, I simply could not get excited about TypeScript, and I didn’t dig deeper. I completely missed a few key points of the language and compiler.</p>
        <p><strong>Using TypeScript with other tools</strong></p>
        <p>When I think about other tools that I have used for JavaScript development, the following come to my mind: linting tools, Browserify/Webpack, testing frameworks, and BabelJS. Is TypeScript making some of them obsolete?</p>
        <p><strong>Linting tools</strong></p>
        <p>If TypeScript is so powerful when it comes to catching errors, do we need tools like ESLint <img class=" alignleft" src="https://carbajalsalinas.files.wordpress.com/2017/01/mejor-lenguajes-de-programacic3b3n.png?w=241&amp;h=228" alt="mejor-lenguajes-de-programacion">or JSHint? The answer is “yes.” For example, in addition to error checks, ESLint contains stylistic and best practice code format checks. Unfortunately, compatibility with ESLint relies on the TypeScript ESLint Parser project, which is in the experimental stage.</p>
        <p>The good news is that there is a tool called TSLint that was created for TypeScript.</p>
        <p><strong>Conclusion</strong></p>
        <p>I hope I was able to give you at least a small part of my enthusiasm so that you give TypeScript another chance. I would like to hear whether you have had successful or miserable experiences using TypeScript in real projects. Until next time!</p><p>&nbsp;</p>
        <p>&nbsp;</p>

    </div><!-- .entry-content -->

</article>