@{
    Layout = "~/Views/Shared/_LayoutAngular.cshtml";
} 

<article id="post-50" class="post-50 post type-post status-publish format-standard hentry category-uncategorized">
    <header class="entry-header">
        <div class="entry-meta">
            <a title="3:30 pm" rel="bookmark"><time class="entry-date" datetime="2017-01-23T15:30:03+00:00">January 23, 2017</time></a><span class="byline"> by <span class="author vcard"><a class="url fn n" href="" title="View all posts by carbajalsalinas" rel="author">carbajalsalinas</a></span></span>
        </div><!-- .entry-meta -->
        <h1 class="page-title">AngularJS: </h1>
    </header><!-- .entry-header -->

    <div class="entry-content">
        <p><strong>¿Qué es?</strong></p>
        <p>Es un proyecto de código abierto que contiene un conjunto de librerías útiles para el desarrollo de aplicaciones web y propone una serie de patrones de diseño para llevarlas a cabo. En pocas palabras, es lo que se conoce como un framework para el desarrollo, en este caso sobre el lenguaje JavaScript con programación del lado del cliente, Esta framework MVC de JavaScript sirve para el desarrollo de Web Front End que permite crear aplicaciones SPA (Single Page Applications)</p>
        <p><img class=" alignright" src="https://i0.wp.com/atraura.com/wp-content/uploads/2016/04/angularjs.png" alt="Resultado de imagen para angularjs objetivos" width="412" height="232"></p>
        <p>AngularJS nace en torno a la creencia de que la programación declarativa es la que debe ser utilizada para general interfaces de usuario y enlazar componentes de software, mientras que la programación imperativa es excelente para expresar la lógica del negocio.</p>
        <p><strong>¿Cuáles son sus objetivos?</strong></p>
        <ul>
            <li>Disosiar la manipulación del DOM de la lógica de la aplicación. Esto mejora la capacidad de prueba del código.</li>
            <li>Considerar a las pruebas de la aplicación como iguales en importancia a la escritura de la aplicación. La dificultad de las pruebas se ve reducida drásticamente por la forma en que el código está estructurado.</li>
            <li>Disociar el lado del cliente de una aplicación del lado del servidor. Esto permite que el trabajo de desarrollo avance en paralelo, y permite la reutilización de ambos lados.</li>
            <li>Guiar a los desarrolladores a través de todo el proceso del desarrollo de una aplicación: desde el diseño de la&nbsp;interfaz de usuario, a través de la escritura de la lógica del negocio, hasta las pruebas.</li>
        </ul>
        <p><strong>¿Para que funciona?</strong></p>
        <p>Como se mencionó anteriormente su principal uso es para la creación de SPA (Single Page Applications) las cuales son aplicaciones pensadas con el objetivo de lograr la mayor fluidez, esto se logra a través de la comunicación entre el cliente y el servidor cuando se realiza de forma transparente, esto hace que de la sensación de que nunca abandonaste la página principal de la aplicación.</p>
        <p>Pero no solo sirve para la realización de SPA, también se puede utilizar para construir una gran variedad de aplicaciones, aprovechando herramientas como el&nbsp;templating, el&nbsp;two-way data binding,&nbsp;pluralization, módulos,&nbsp;dependency injection, etc. AngularJs ataca de raíz el problema base por el cual html no está diseñado teniendo en cuenta las vistas dinámicas. Un ejemplo claro podrían ser los formularios, permitiendo validar sus campos sin tener que recargar la página, como se haría típicamente en lenguaje del lado del servidor. También está pensado de cara a la extensibilidad, gracias a la posibilidad de crear tus propios componen<img class=" alignleft" src="https://www.ondho.com/wp-content/uploads/2015/03/angular.jpg" alt="Resultado de imagen para angularjs objetivos" width="378" height="256">tes web personalizados (mediante directivas), favoreciendo su reutilización consiguiendo una gran integración con html5.</p>
        <p>&nbsp;</p>
        <p>Podría ofrecer cualquier tipo de funcionalidad, como cargar información referente a “myVar1” de manera remota y mostrarla con un formato determinado. Otra posible razón de peso podría ser el uso casi obligatorio de ciertas best practices. En general, el equipo de AngularJs se ha esforzado bastante en obligarnos a adoptar ciertos patrones de diseño, como la inyección de dependencias, reutilización de funcionalidades (módulos), etc., alejándonos del spaghetti code en la medida de lo posible.</p>
    </div><!-- .entry-content -->

</article>